cloud: ""
namespace: platformatic

serviceAccount:
  create: true
  name: "platformatic"
  annotations: {}

imagePullSecret:
  name: "image-pull-secret"
  registry: ghcr.io
  user: ""
  token: ""

ingress:
  enabled: false

services:
  icc:
    name: icc
    deploy: true
    replicaCount: 1
    podAnnotations: {}
    podSecurityContext: {}
    monitor:
      enabled: true
    healthchecks:
      livenessProbe:
        httpGet:
          path: /api/status
          port: http
        failureThreshold: 5
        initialDelaySeconds: 40
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      readinessProbe:
        httpGet:
          path: /api/status
          port: http
        failureThreshold: 5
        initialDelaySeconds: 40
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
    nodeSelector: {}
    tolerations: []
    affinity: {}
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80
    image:
      repository: ghcr.io/platformatic/plt-icc-3
      pullPolicy: Always
      tag: "latest"
    env:
      # Shared
      PORT: 3042
      DEV_K8S: true
      PLT_EXTERNAL_TRAFFICANTE_URL: http://icc.platformatic.svc.cluster.local:3042/trafficante
      PLT_EXTERNAL_ACTIVITIES_URL: http://icc.platformatic.svc.cluster.local:3042/activities
      PLT_EXTERNAL_COMPLIANCE_URL: http://icc.platformatic.svc.cluster.local:3042/compliance
      PLT_EXTERNAL_CRON_URL: http://icc.platformatic.svc.cluster.local:3042/cron
      PLT_EXTERNAL_USER_MANAGER_URL: http://icc.platformatic.svc.cluster.local:3042/user-manager
      PLT_EXTERNAL_RISK_MANAGER_URL: http://icc.platformatic.svc.cluster.local:3042/risk-manager
      PLT_EXTERNAL_RISK_SERVICE_URL: http://icc.platformatic.svc.cluster.local:3042/risk-service
      PLT_EXTERNAL_METRICS_URL: http://icc.platformatic.svc.cluster.local:3042/metrics
      PLT_MAIN_SERVICE_URL: http://main.plt.local
      PLT_CONTROL_PLANE_URL: http://control-plane.plt.local
      PLT_MACHINIST_URL: http://machinist.platformatic.svc.cluster.local

      # Main service
      DEMO_LOGIN: "true"
      DEV: true
      PLT_MAIN_LOGGER_LEVEL: "info"
      VITE_API_BASE_URL: "http://icc.platformatic.svc.cluster.local"
      VITE_SERVER_URL: "http://icc.platformatic.svc.cluster.local"
      VITE_TERMS_VERSION: 1
      VITE_DEMO_LOGIN: "DEMO"
      VITE_SUPPORTED_LOGINS: "demo"

      # Metrics
      PLT_METRICS_PROMETHEUS_URL: "http://prometheus-kube-prometheus-prometheus.monitoring.svc.cluster.local:9090"

      # User Manager
      PLT_USER_MANAGER_APPLY_MIGRATIONS: "true"
      PLT_USER_MANAGER_TYPESCRIPT: "false"
      PLT_USER_MANAGER_SESSION_SECRET_KEY: "iNEU1LFsoWlUvWzkKOCwTyTsUQriyg8KmXxpQGxLXxU="
      PLT_USER_MANAGER_SUPER_ADMIN_EMAIL: "demo@platformatic.dev"

      # Compliance
      PLT_COMPLIANCE_LOGGER_LEVEL: "info"
      PLT_COMPLIANCE_RULES_DIR: "./rules"

      # Control Plane
      PLT_CONTROL_PLANE_LOG_LEVEL: "info"

      # Cron
      PLT_CRON_LOGGER_LEVEL: "info"

      # Trafficante
      PLT_TRAFFICANTE_LOGGER_LEVEL: "warn"

    secrets:
      # Main service
      PLT_GITHUB_OAUTH_CLIENT_ID: ""
      PLT_GITHUB_OAUTH_CLIENT_SECRET: ""
      PLT_GOOGLE_OAUTH_CLIENT_ID: ""
      PLT_GOOGLE_OAUTH_CLIENT_SECRET: ""
      PLT_MAIN_SESSION_SECRET_KEY: ""

      # Activities
      PLT_ACTIVITIES_DATABASE_URL: "postgres://postgres:postgres@dbactivities-postgresql.default.svc.cluster.local/activities"

      # User Manager
      PLT_USER_MANAGER_DATABASE_URL: "postgres://postgres:postgres@dbusermanager-postgresql.default.svc.cluster.local/user_manager"

      # Compliance
      PLT_COMPLIANCE_DATABASE_URL: "postgres://postgres:postgres@dbcompliance-postgresql.default.svc.cluster.local/compliance"

      # Control Plane
      PLT_CONTROL_PLANE_DATABASE_URL: "postgres://postgres:postgres@dbcontrolplane-postgresql.default.svc.cluster.local/control_plane"
      # Comma separated list of secret keys
      PLT_CONTROL_PLANE_SECRET_KEYS: "test"

      # Cron
      PLT_CRON_DATABASE_URL: "postgres://postgres:postgres@dbcron-postgresql.default.svc.cluster.local/cron"

      # Trafficante
      PLT_TRAFFICANTE_DATABASE_URL: "postgres://postgres:postgres@dbtrafficante-postgresql.default.svc.cluster.local/trafficante"
      PLT_TRAFFICANTE_REDIS_CONNECTION_STRING: "redis://valkey-master.default.svc.cluster.local:6379"

    resources:
      limits:
        cpu: 2
        memory: 2048Mi
      requests:
        cpu: 1
        memory: 1024Mi
    service:
      type: NodePort
      port: 80
      targetPort: 3042

  machinist:
    name: machinist
    deploy: true
    replicaCount: 1
    podAnnotations: {}
    podSecurityContext: {}
    monitor:
      enabled: true
    healthchecks:
      livenessProbe:
        httpGet:
          path: /status
          port: http
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      readinessProbe:
        httpGet:
          path: /status
          port: http
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
    nodeSelector: {}
    tolerations: []
    affinity: {}
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 5
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80
    image:
      repository: ghcr.io/platformatic/plt-machinist-3
      pullPolicy: Always
      tag: "latest"
    env:
      PLT_DEV_MODE: true
      PLT_PORT: 3000
      PLT_LOGGER_LEVEL: "debug"
      PLT_K8S_PROVIDER: "k8s"

      PLT_K8S_INSTALLED_NAMESPACE: "platformatic"
      PLT_K8S_STORAGE_CLASS: "local-path"
      PLT_K8S_MACHINE_WAIT_TIMEOUT_MS: 180000

      # TODO(mzugm) remove these after confirming machinist-3 fails if they are not recieved
      PLT_DEFAULT_MACHINE_CPU_COUNT: 1
      PLT_DEFAULT_MACHINE_MEMORY_MB: 512

      PLT_DISABLE_EVENT_EXPORT: true

    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 0.5
        memory: 512Mi
    service:
      type: NodePort
      port: 80
      targetPort: 3000
