cloud: ""
namespace: platformatic

serviceAccounts:
  - name: "plt-pod-manager"
    namespace: "platformatic"
    annotations: {}
    resources:
      read:
        apiGroups:
          - ""
          - apps
          - networking.k8s.io
        kinds:
          - pods
          - deployments
          - replicasets
          - replicationcontrollers
          - ingresses
          - services
      update:
        apiGroups:
          - ""
          - apps
        kinds:
          - deployments
          - replicasets
          - replicationcontrollers
          - pods

imagePullSecret:
  name: "image-pull-secret"
  registry: ghcr.io
  user: ""
  token: ""

ingress:
  enabled: false

wattpro:
  monitor:
    enable: true
    name: "wattpro"
    matchLabels:
      platformatic.dev/monitor: "prometheus"
    port: "metrics"

services:
  icc:
    name: icc
    deploy: true
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80
    podAnnotations: {}
    podSecurityContext: {}
    monitor:
      enabled: true
    healthchecks:
      livenessProbe:
        httpGet:
          path: /api/status
          port: http
        failureThreshold: 5
        initialDelaySeconds: 40
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      readinessProbe:
        httpGet:
          path: /api/status
          port: http
        failureThreshold: 5
        initialDelaySeconds: 40
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
    nodeSelector: {}
    tolerations: []
    affinity: {}
    image:
      repository: ghcr.io/platformatic/plt-icc-3
      pullPolicy: Always
      tag: "demo"
    env:
      PLT_MAIN_LOGGER_LEVEL: "warn"
      PLT_COMPLIANCE_LOGGER_LEVEL: "warn"
      PLT_CRON_LOGGER_LEVEL: "warn"
      PLT_CONTROL_PLANE_LOG_LEVEL: "warn"
      PLT_TRAFFICANTE_LOGGER_LEVEL: "warn"
      PLT_SCALER_LOGGER_LEVEL: "warn"
      PLT_RISK_SERVICE_LOGGER_LEVEL: "warn"
      PLT_COLD_STORAGE_LOGGER_LEVEL: "warn"
      PLT_SCALER_COOLDOWN: 300
      PLT_SCALER_PERIODIC_TRIGGER: 60
      PLT_METRICS_TIME_RANGE: 60
    secrets:
      # Shared
      PLT_ICC_SESSION_SECRET: ""
      # Main service
      PLT_GITHUB_OAUTH_CLIENT_ID: ""
      PLT_GITHUB_OAUTH_CLIENT_SECRET: ""
      PLT_GOOGLE_OAUTH_CLIENT_ID: ""
      PLT_GOOGLE_OAUTH_CLIENT_SECRET: ""
      PLT_MAIN_SESSION_SECRET_KEY: ""
      # Activities
      PLT_ACTIVITIES_DATABASE_URL: ""
      # User Manager
      PLT_USER_MANAGER_DATABASE_URL: ""
      PLT_USER_MANAGER_SESSION_SECRET_KEY: ""
      # Compliance
      PLT_COMPLIANCE_DATABASE_URL: ""
      # Control Plane
      PLT_CONTROL_PLANE_DATABASE_URL: ""
      PLT_CONTROL_PLANE_SECRET_KEYS: ""
      # Cron
      PLT_CRON_DATABASE_URL: ""
      # Trafficante
      PLT_TRAFFICANTE_DATABASE_URL: ""
      # Scaler
      PLT_SCALER_DATABASE_URL: ""
      # Risk Cold Storage
      PLT_COLD_STORAGE_DATABASE_URL: ""
    resources:
      limits:
        cpu: 2
        memory: 2048Mi
      requests:
        cpu: 1
        memory: 1024Mi
    service:
      type: NodePort
      port: 80
      targetPort: 3042

  machinist:
    name: machinist
    deploy: true
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80
    podAnnotations: {}
    podSecurityContext: {}
    monitor:
      enabled: true
    serviceAccountName: "plt-pod-manager"
    healthchecks:
      livenessProbe:
        httpGet:
          path: /status
          port: http
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      readinessProbe:
        httpGet:
          path: /status
          port: http
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
    nodeSelector: {}
    tolerations: []
    affinity: {}
    image:
      repository: ghcr.io/platformatic/plt-machinist-3
      pullPolicy: Always
      tag: "demo"
    env:
      PLT_LOGGER_LEVEL: "warn"
    secrets: {}
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 0.5
        memory: 512Mi
    service:
      type: NodePort
      port: 80
      targetPort: 3000
